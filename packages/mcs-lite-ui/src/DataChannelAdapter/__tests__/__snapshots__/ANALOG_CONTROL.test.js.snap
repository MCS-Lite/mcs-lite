// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render ANALOG_CONTROL correctly with default value to N/A 1`] = `
.c3 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c7 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c8 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c8::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-focus-outer {
  border: 0;
}

.c8::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c1 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c2::before {
  content: '';
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c5 {
  margin-bottom: 15px;
}

.c6 {
  display: inline-block;
}

.c4 {
  padding: 0 0%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "ANALOG_CONTROL",
      "values": Object {},
    }
  }
  eventHandler={[Function]}
>
  <ControlRange
    labels={
      Array [
        0,
        100,
      ]
    }
    onChange={[Function]}
    onSubmit={[Function]}
    value=""
    valueMapper={[Function]}
  >
    <ControlRange__Container>
      <div
        className="c0"
      >
        <ControlRange__LabelWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c1"
          >
            <ControlRange__LabelItem
              key="0"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      0
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
            <ControlRange__LabelItem
              key="100"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      100
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
          </div>
        </ControlRange__LabelWrapper>
        <ControlRange__InputWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c4"
          >
            <ControlRange__ValueWrapper
              color="grayBase"
            >
              <P
                className="c5"
                color="grayBase"
              >
                <Component
                  className="c5 c3"
                  color="grayBase"
                >
                  <div
                    className="c5 c3"
                    color="grayBase"
                  >
                    Current value:Â 
                    <ControlRange__Value
                      color="primary"
                    >
                      <P
                        className="c6"
                        color="primary"
                      >
                        <Component
                          className="c6 c7"
                          color="primary"
                        >
                          <p
                            className="c6 c7"
                            color="primary"
                          >
                            N/A
                          </p>
                        </Component>
                      </P>
                    </ControlRange__Value>
                  </div>
                </Component>
              </P>
            </ControlRange__ValueWrapper>
            <InputRange
              kind="primary"
              max={100}
              min={0}
              onChange={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              step={1}
              type="range"
              value=""
            >
              <input
                className="c8"
                kind="primary"
                max={100}
                min={0}
                onChange={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                step={1}
                type="range"
                value=""
              />
            </InputRange>
          </div>
        </ControlRange__InputWrapper>
      </div>
    </ControlRange__Container>
  </ControlRange>
</DataChannelAdapter>
`;

exports[`should render ANALOG_CONTROL correctly with max 1`] = `
.c3 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c7 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c8 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c8::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-focus-outer {
  border: 0;
}

.c8::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c1 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c2::before {
  content: '';
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c5 {
  margin-bottom: 15px;
}

.c6 {
  display: inline-block;
}

.c4 {
  padding: 0 0%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "ANALOG_CONTROL",
      "values": Object {
        "value": 100,
      },
    }
  }
  eventHandler={[Function]}
>
  <ControlRange
    labels={
      Array [
        0,
        100,
      ]
    }
    onChange={[Function]}
    onSubmit={[Function]}
    value={100}
    valueMapper={[Function]}
  >
    <ControlRange__Container>
      <div
        className="c0"
      >
        <ControlRange__LabelWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c1"
          >
            <ControlRange__LabelItem
              key="0"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      0
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
            <ControlRange__LabelItem
              key="100"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      100
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
          </div>
        </ControlRange__LabelWrapper>
        <ControlRange__InputWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c4"
          >
            <ControlRange__ValueWrapper
              color="grayBase"
            >
              <P
                className="c5"
                color="grayBase"
              >
                <Component
                  className="c5 c3"
                  color="grayBase"
                >
                  <div
                    className="c5 c3"
                    color="grayBase"
                  >
                    Current value:Â 
                    <ControlRange__Value
                      color="primary"
                    >
                      <P
                        className="c6"
                        color="primary"
                      >
                        <Component
                          className="c6 c7"
                          color="primary"
                        >
                          <div
                            className="c6 c7"
                            color="primary"
                          >
                            100
                          </div>
                        </Component>
                      </P>
                    </ControlRange__Value>
                  </div>
                </Component>
              </P>
            </ControlRange__ValueWrapper>
            <InputRange
              kind="primary"
              max={100}
              min={0}
              onChange={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              step={1}
              type="range"
              value={100}
            >
              <input
                className="c8"
                kind="primary"
                max={100}
                min={0}
                onChange={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                step={1}
                type="range"
                value={100}
              />
            </InputRange>
          </div>
        </ControlRange__InputWrapper>
      </div>
    </ControlRange__Container>
  </ControlRange>
</DataChannelAdapter>
`;

exports[`should render ANALOG_CONTROL correctly with zero 1`] = `
.c3 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c7 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c8 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c8::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-moz-focus-outer {
  border: 0;
}

.c8::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#dfdfdf 5%,#f6f6f6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #e5e6e6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c8::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient( 50% 50%,#ffffff 50%,#ffffff 73%,#f8f8f8 81%,#ebebeb 90%,#dddddd 95% );
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c8::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c8::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c0 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c1 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c2::before {
  content: '';
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c5 {
  margin-bottom: 15px;
}

.c6 {
  display: inline-block;
}

.c4 {
  padding: 0 0%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "ANALOG_CONTROL",
      "values": Object {
        "value": 0,
      },
    }
  }
  eventHandler={[Function]}
>
  <ControlRange
    labels={
      Array [
        0,
        100,
      ]
    }
    onChange={[Function]}
    onSubmit={[Function]}
    value={0}
    valueMapper={[Function]}
  >
    <ControlRange__Container>
      <div
        className="c0"
      >
        <ControlRange__LabelWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c1"
          >
            <ControlRange__LabelItem
              key="0"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      0
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
            <ControlRange__LabelItem
              key="100"
            >
              <div
                className="c2"
              >
                <P
                  color="grayBase"
                >
                  <Component
                    className="c3"
                    color="grayBase"
                  >
                    <div
                      className="c3"
                      color="grayBase"
                    >
                      100
                    </div>
                  </Component>
                </P>
              </div>
            </ControlRange__LabelItem>
          </div>
        </ControlRange__LabelWrapper>
        <ControlRange__InputWrapper
          labels={
            Array [
              0,
              100,
            ]
          }
        >
          <div
            className="c4"
          >
            <ControlRange__ValueWrapper
              color="grayBase"
            >
              <P
                className="c5"
                color="grayBase"
              >
                <Component
                  className="c5 c3"
                  color="grayBase"
                >
                  <div
                    className="c5 c3"
                    color="grayBase"
                  >
                    Current value:Â 
                    <ControlRange__Value
                      color="primary"
                    >
                      <P
                        className="c6"
                        color="primary"
                      >
                        <Component
                          className="c6 c7"
                          color="primary"
                        >
                          <div
                            className="c6 c7"
                            color="primary"
                          >
                            0
                          </div>
                        </Component>
                      </P>
                    </ControlRange__Value>
                  </div>
                </Component>
              </P>
            </ControlRange__ValueWrapper>
            <InputRange
              kind="primary"
              max={100}
              min={0}
              onChange={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              step={1}
              type="range"
              value={0}
            >
              <input
                className="c8"
                kind="primary"
                max={100}
                min={0}
                onChange={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                step={1}
                type="range"
                value={0}
              />
            </InputRange>
          </div>
        </ControlRange__InputWrapper>
      </div>
    </ControlRange__Container>
  </ControlRange>
</DataChannelAdapter>
`;
