// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render INTEGER_CONTROL correctly with default value to empty 1`] = `
.c5 {
  color: #00A1DE;
  -webkit-transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c5:hover {
  color: rgb(0,151,208);
}

.c5:active {
  color: rgb(0,144,198);
}

.c3 {
  margin: 0;
  font-size: 1rem;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 > * {
  margin-right: 5px;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c1 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c1:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c1::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c0 {
  width: 100%;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-top: 10px;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {},
      "id": "id",
      "type": "INTEGER_CONTROL",
      "values": Object {},
    }
  }
  eventHandler={[Function]}
>
  <ControlNumber
    onChange={[Function]}
    onClear={[Function]}
    onSubmit={[Function]}
    placeholder="Integer only"
    value=""
  >
    <ControlNumber__Container>
      <div
        className="c0"
      >
        <Input
          focus={false}
          kind="primary"
          onChange={[Function]}
          placeholder="Integer only"
          type="number"
          value=""
        >
          <input
            className="c1"
            kind="primary"
            onChange={[Function]}
            placeholder="Integer only"
            type="number"
            value=""
          />
        </Input>
        <ControlNumber__ButtonWrapper>
          <div
            className="c2"
          >
            <ButtonClear
              onClick={[Function]}
            >
              <P
                onClick={[Function]}
              >
                <Component
                  className="c3"
                  onClick={[Function]}
                >
                  <div
                    className="c3"
                    onClick={[Function]}
                  >
                    <ButtonClear__StyledA>
                      <A
                        className="c4"
                        color="primary"
                      >
                        <a
                          className="c4 c5"
                          color="primary"
                        >
                          <IconDelete
                            size="1em"
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              preserveAspectRatio="xMidYMid meet"
                              viewBox="0 0 24 24"
                              width="1em"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm9-10h1v10h-1V9zm-4 0h2v10h-2V9zM8 9h1v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4h-3.5z"
                              />
                            </svg>
                          </IconDelete>
                          Clear
                        </a>
                      </A>
                    </ButtonClear__StyledA>
                  </div>
                </Component>
              </P>
            </ButtonClear>
            <Button
              active={false}
              block={false}
              component="button"
              disabled={false}
              kind="primary"
              onClick={[Function]}
              round={false}
              size="normal"
              square={false}
            >
              <BaseComponent
                active={false}
                block={false}
                className="c6"
                component="button"
                disabled={false}
                kind="primary"
                onClick={[Function]}
                round={false}
                size="normal"
                square={false}
              >
                <button
                  className="c6"
                  onClick={[Function]}
                >
                  Ok
                </button>
              </BaseComponent>
            </Button>
          </div>
        </ControlNumber__ButtonWrapper>
      </div>
    </ControlNumber__Container>
  </ControlNumber>
</DataChannelAdapter>
`;

exports[`should render INTEGER_CONTROL correctly with unit 1`] = `
.c6 {
  color: #00A1DE;
  -webkit-transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c6:hover {
  color: rgb(0,151,208);
}

.c6:active {
  color: rgb(0,144,198);
}

.c4 {
  margin: 0;
  font-size: 1rem;
}

.c1 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
  margin-bottom: 5px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 > * {
  margin-right: 5px;
}

.c7 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c7:hover {
  background-color: rgb(0,151,208);
}

.c7:active {
  background-color: rgb(0,144,198);
}

.c2 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c2:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c2::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c2::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c2:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c2::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c0 {
  width: 100%;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-top: 10px;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "unit": "攝氏",
      },
      "id": "id",
      "type": "INTEGER_CONTROL",
      "values": Object {
        "value": 1,
      },
    }
  }
  eventHandler={[Function]}
>
  <ControlNumber
    onChange={[Function]}
    onClear={[Function]}
    onSubmit={[Function]}
    placeholder="Integer only"
    unit="單位：攝氏"
    value={1}
  >
    <ControlNumber__Container>
      <div
        className="c0"
      >
        <P
          color="grayDark"
        >
          <Component
            className="c1"
            color="grayDark"
          >
            <p
              className="c1"
              color="grayDark"
            >
              單位：攝氏
            </p>
          </Component>
        </P>
        <Input
          focus={false}
          kind="primary"
          onChange={[Function]}
          placeholder="Integer only"
          type="number"
          value={1}
        >
          <input
            className="c2"
            kind="primary"
            onChange={[Function]}
            placeholder="Integer only"
            type="number"
            value={1}
          />
        </Input>
        <ControlNumber__ButtonWrapper>
          <div
            className="c3"
          >
            <ButtonClear
              onClick={[Function]}
            >
              <P
                onClick={[Function]}
              >
                <Component
                  className="c4"
                  onClick={[Function]}
                >
                  <div
                    className="c4"
                    onClick={[Function]}
                  >
                    <ButtonClear__StyledA>
                      <A
                        className="c5"
                        color="primary"
                      >
                        <a
                          className="c5 c6"
                          color="primary"
                        >
                          <IconDelete
                            size="1em"
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              preserveAspectRatio="xMidYMid meet"
                              viewBox="0 0 24 24"
                              width="1em"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm9-10h1v10h-1V9zm-4 0h2v10h-2V9zM8 9h1v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4h-3.5z"
                              />
                            </svg>
                          </IconDelete>
                          Clear
                        </a>
                      </A>
                    </ButtonClear__StyledA>
                  </div>
                </Component>
              </P>
            </ButtonClear>
            <Button
              active={false}
              block={false}
              component="button"
              disabled={false}
              kind="primary"
              onClick={[Function]}
              round={false}
              size="normal"
              square={false}
            >
              <BaseComponent
                active={false}
                block={false}
                className="c7"
                component="button"
                disabled={false}
                kind="primary"
                onClick={[Function]}
                round={false}
                size="normal"
                square={false}
              >
                <button
                  className="c7"
                  onClick={[Function]}
                >
                  Ok
                </button>
              </BaseComponent>
            </Button>
          </div>
        </ControlNumber__ButtonWrapper>
      </div>
    </ControlNumber__Container>
  </ControlNumber>
</DataChannelAdapter>
`;

exports[`should render INTEGER_CONTROL correctly with value 1`] = `
.c5 {
  color: #00A1DE;
  -webkit-transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c5:hover {
  color: rgb(0,151,208);
}

.c5:active {
  color: rgb(0,144,198);
}

.c3 {
  margin: 0;
  font-size: 1rem;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 > * {
  margin-right: 5px;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c1 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c1:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c1::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c0 {
  width: 100%;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-top: 10px;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {},
      "id": "id",
      "type": "INTEGER_CONTROL",
      "values": Object {
        "value": 1,
      },
    }
  }
  eventHandler={[Function]}
>
  <ControlNumber
    onChange={[Function]}
    onClear={[Function]}
    onSubmit={[Function]}
    placeholder="Integer only"
    value={1}
  >
    <ControlNumber__Container>
      <div
        className="c0"
      >
        <Input
          focus={false}
          kind="primary"
          onChange={[Function]}
          placeholder="Integer only"
          type="number"
          value={1}
        >
          <input
            className="c1"
            kind="primary"
            onChange={[Function]}
            placeholder="Integer only"
            type="number"
            value={1}
          />
        </Input>
        <ControlNumber__ButtonWrapper>
          <div
            className="c2"
          >
            <ButtonClear
              onClick={[Function]}
            >
              <P
                onClick={[Function]}
              >
                <Component
                  className="c3"
                  onClick={[Function]}
                >
                  <div
                    className="c3"
                    onClick={[Function]}
                  >
                    <ButtonClear__StyledA>
                      <A
                        className="c4"
                        color="primary"
                      >
                        <a
                          className="c4 c5"
                          color="primary"
                        >
                          <IconDelete
                            size="1em"
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              preserveAspectRatio="xMidYMid meet"
                              viewBox="0 0 24 24"
                              width="1em"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm9-10h1v10h-1V9zm-4 0h2v10h-2V9zM8 9h1v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4h-3.5z"
                              />
                            </svg>
                          </IconDelete>
                          Clear
                        </a>
                      </A>
                    </ButtonClear__StyledA>
                  </div>
                </Component>
              </P>
            </ButtonClear>
            <Button
              active={false}
              block={false}
              component="button"
              disabled={false}
              kind="primary"
              onClick={[Function]}
              round={false}
              size="normal"
              square={false}
            >
              <BaseComponent
                active={false}
                block={false}
                className="c6"
                component="button"
                disabled={false}
                kind="primary"
                onClick={[Function]}
                round={false}
                size="normal"
                square={false}
              >
                <button
                  className="c6"
                  onClick={[Function]}
                >
                  Ok
                </button>
              </BaseComponent>
            </Button>
          </div>
        </ControlNumber__ButtonWrapper>
      </div>
    </ControlNumber__Container>
  </ControlNumber>
</DataChannelAdapter>
`;

exports[`should render INTEGER_CONTROL correctly with zero 1`] = `
.c5 {
  color: #00A1DE;
  -webkit-transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c5:hover {
  color: rgb(0,151,208);
}

.c5:active {
  color: rgb(0,144,198);
}

.c3 {
  margin: 0;
  font-size: 1rem;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 > * {
  margin-right: 5px;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c1 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c1:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c1::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c1::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c0 {
  width: 100%;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-top: 10px;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {},
      "id": "id",
      "type": "INTEGER_CONTROL",
      "values": Object {
        "value": 0,
      },
    }
  }
  eventHandler={[Function]}
>
  <ControlNumber
    onChange={[Function]}
    onClear={[Function]}
    onSubmit={[Function]}
    placeholder="Integer only"
    value={0}
  >
    <ControlNumber__Container>
      <div
        className="c0"
      >
        <Input
          focus={false}
          kind="primary"
          onChange={[Function]}
          placeholder="Integer only"
          type="number"
          value={0}
        >
          <input
            className="c1"
            kind="primary"
            onChange={[Function]}
            placeholder="Integer only"
            type="number"
            value={0}
          />
        </Input>
        <ControlNumber__ButtonWrapper>
          <div
            className="c2"
          >
            <ButtonClear
              onClick={[Function]}
            >
              <P
                onClick={[Function]}
              >
                <Component
                  className="c3"
                  onClick={[Function]}
                >
                  <div
                    className="c3"
                    onClick={[Function]}
                  >
                    <ButtonClear__StyledA>
                      <A
                        className="c4"
                        color="primary"
                      >
                        <a
                          className="c4 c5"
                          color="primary"
                        >
                          <IconDelete
                            size="1em"
                          >
                            <svg
                              fill="currentColor"
                              height="1em"
                              preserveAspectRatio="xMidYMid meet"
                              viewBox="0 0 24 24"
                              width="1em"
                            >
                              <path
                                d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm9-10h1v10h-1V9zm-4 0h2v10h-2V9zM8 9h1v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4h-3.5z"
                              />
                            </svg>
                          </IconDelete>
                          Clear
                        </a>
                      </A>
                    </ButtonClear__StyledA>
                  </div>
                </Component>
              </P>
            </ButtonClear>
            <Button
              active={false}
              block={false}
              component="button"
              disabled={false}
              kind="primary"
              onClick={[Function]}
              round={false}
              size="normal"
              square={false}
            >
              <BaseComponent
                active={false}
                block={false}
                className="c6"
                component="button"
                disabled={false}
                kind="primary"
                onClick={[Function]}
                round={false}
                size="normal"
                square={false}
              >
                <button
                  className="c6"
                  onClick={[Function]}
                >
                  Ok
                </button>
              </BaseComponent>
            </Button>
          </div>
        </ControlNumber__ButtonWrapper>
      </div>
    </ControlNumber__Container>
  </ControlNumber>
</DataChannelAdapter>
`;
