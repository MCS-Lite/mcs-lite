// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render PWM_CONTROL correctly with default value to N/A 1`] = `
.c2 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c13 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c5 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c5:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c5::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c14 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c14::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-focus-outer {
  border: 0;
}

.c14::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c7 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c8 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c8 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-flex-grow: 1;
  -ms-flex-grow: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-basis: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c9::before {
  content: "";
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c11 {
  margin-bottom: 15px;
}

.c12 {
  display: inline-block;
}

.c10 {
  padding: 0 0%;
}

.c1 {
  margin-bottom: 10px;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin-top: 5px;
}

.c4 {
  margin-right: 10px;
}

.c0 {
  width: 100%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "PWM_CONTROL",
      "values": Object {},
    }
  }
  eventHandler={[Function]}
>
  <DataChannelAdapter__Wrapper>
    <div
      className="c0"
    >
      <ControlPeriod
        onChange={[Function]}
        onSubmit={[Function]}
        placeholder="Integer only"
        value=""
      >
        <ControlPeriod__Container>
          <div
            className="c1"
          >
            <label
              htmlFor="input"
            >
              <P
                color="grayBase"
              >
                <Component
                  className="c2"
                  color="grayBase"
                >
                  <p
                    className="c2"
                    color="grayBase"
                  >
                    Period
                  </p>
                </Component>
              </P>
            </label>
            <ControlPeriod__InputWrapper>
              <div
                className="c3"
              >
                <ControlPeriod__StyledInput
                  onChange={[Function]}
                  placeholder="Integer only"
                  type="number"
                  value=""
                >
                  <Input
                    className="c4"
                    focus={false}
                    kind="primary"
                    onChange={[Function]}
                    placeholder="Integer only"
                    type="number"
                    value=""
                  >
                    <input
                      className="c4 c5"
                      kind="primary"
                      onChange={[Function]}
                      placeholder="Integer only"
                      type="number"
                      value=""
                    />
                  </Input>
                </ControlPeriod__StyledInput>
                <Button
                  active={false}
                  block={false}
                  component="button"
                  disabled={false}
                  kind="primary"
                  onClick={[Function]}
                  round={false}
                  size="normal"
                  square={false}
                >
                  <BaseComponent
                    active={false}
                    block={false}
                    className="c6"
                    component="button"
                    disabled={false}
                    kind="primary"
                    onClick={[Function]}
                    round={false}
                    size="normal"
                    square={false}
                  >
                    <button
                      className="c6"
                      onClick={[Function]}
                    >
                      Ok
                    </button>
                  </BaseComponent>
                </Button>
              </div>
            </ControlPeriod__InputWrapper>
          </div>
        </ControlPeriod__Container>
      </ControlPeriod>
      <ControlRange
        labels={
          Array [
            0,
            100,
          ]
        }
        onChange={[Function]}
        onSubmit={[Function]}
        value=""
        valueMapper={[Function]}
      >
        <ControlRange__Container>
          <div
            className="c7"
          >
            <ControlRange__LabelWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c8"
              >
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          0
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          100
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
              </div>
            </ControlRange__LabelWrapper>
            <ControlRange__InputWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c10"
              >
                <ControlRange__ValueWrapper
                  color="grayBase"
                >
                  <P
                    className="c11"
                    color="grayBase"
                  >
                    <Component
                      className="c11 c2"
                      color="grayBase"
                    >
                      <div
                        className="c11 c2"
                        color="grayBase"
                      >
                        Current value: 
                        <ControlRange__Value
                          color="primary"
                        >
                          <P
                            className="c12"
                            color="primary"
                          >
                            <Component
                              className="c12 c13"
                              color="primary"
                            >
                              <p
                                className="c12 c13"
                                color="primary"
                              >
                                N/A
                              </p>
                            </Component>
                          </P>
                        </ControlRange__Value>
                      </div>
                    </Component>
                  </P>
                </ControlRange__ValueWrapper>
                <InputRange
                  kind="primary"
                  max={100}
                  min={0}
                  onChange={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  step={1}
                  type="range"
                  value=""
                >
                  <input
                    className="c14"
                    kind="primary"
                    max={100}
                    min={0}
                    onChange={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    step={1}
                    type="range"
                    value=""
                  />
                </InputRange>
              </div>
            </ControlRange__InputWrapper>
          </div>
        </ControlRange__Container>
      </ControlRange>
    </div>
  </DataChannelAdapter__Wrapper>
</DataChannelAdapter>
`;

exports[`should render PWM_CONTROL correctly with max 1`] = `
.c2 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c13 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c5 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c5:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c5::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c14 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c14::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-focus-outer {
  border: 0;
}

.c14::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c7 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c8 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c8 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-flex-grow: 1;
  -ms-flex-grow: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-basis: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c9::before {
  content: "";
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c11 {
  margin-bottom: 15px;
}

.c12 {
  display: inline-block;
}

.c10 {
  padding: 0 0%;
}

.c1 {
  margin-bottom: 10px;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin-top: 5px;
}

.c4 {
  margin-right: 10px;
}

.c0 {
  width: 100%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "PWM_CONTROL",
      "values": Object {
        "period": 1,
        "value": 100,
      },
    }
  }
  eventHandler={[Function]}
>
  <DataChannelAdapter__Wrapper>
    <div
      className="c0"
    >
      <ControlPeriod
        onChange={[Function]}
        onSubmit={[Function]}
        placeholder="Integer only"
        value={1}
      >
        <ControlPeriod__Container>
          <div
            className="c1"
          >
            <label
              htmlFor="input"
            >
              <P
                color="grayBase"
              >
                <Component
                  className="c2"
                  color="grayBase"
                >
                  <p
                    className="c2"
                    color="grayBase"
                  >
                    Period
                  </p>
                </Component>
              </P>
            </label>
            <ControlPeriod__InputWrapper>
              <div
                className="c3"
              >
                <ControlPeriod__StyledInput
                  onChange={[Function]}
                  placeholder="Integer only"
                  type="number"
                  value={1}
                >
                  <Input
                    className="c4"
                    focus={false}
                    kind="primary"
                    onChange={[Function]}
                    placeholder="Integer only"
                    type="number"
                    value={1}
                  >
                    <input
                      className="c4 c5"
                      kind="primary"
                      onChange={[Function]}
                      placeholder="Integer only"
                      type="number"
                      value={1}
                    />
                  </Input>
                </ControlPeriod__StyledInput>
                <Button
                  active={false}
                  block={false}
                  component="button"
                  disabled={false}
                  kind="primary"
                  onClick={[Function]}
                  round={false}
                  size="normal"
                  square={false}
                >
                  <BaseComponent
                    active={false}
                    block={false}
                    className="c6"
                    component="button"
                    disabled={false}
                    kind="primary"
                    onClick={[Function]}
                    round={false}
                    size="normal"
                    square={false}
                  >
                    <button
                      className="c6"
                      onClick={[Function]}
                    >
                      Ok
                    </button>
                  </BaseComponent>
                </Button>
              </div>
            </ControlPeriod__InputWrapper>
          </div>
        </ControlPeriod__Container>
      </ControlPeriod>
      <ControlRange
        labels={
          Array [
            0,
            100,
          ]
        }
        onChange={[Function]}
        onSubmit={[Function]}
        value={100}
        valueMapper={[Function]}
      >
        <ControlRange__Container>
          <div
            className="c7"
          >
            <ControlRange__LabelWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c8"
              >
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          0
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          100
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
              </div>
            </ControlRange__LabelWrapper>
            <ControlRange__InputWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c10"
              >
                <ControlRange__ValueWrapper
                  color="grayBase"
                >
                  <P
                    className="c11"
                    color="grayBase"
                  >
                    <Component
                      className="c11 c2"
                      color="grayBase"
                    >
                      <div
                        className="c11 c2"
                        color="grayBase"
                      >
                        Current value: 
                        <ControlRange__Value
                          color="primary"
                        >
                          <P
                            className="c12"
                            color="primary"
                          >
                            <Component
                              className="c12 c13"
                              color="primary"
                            >
                              <div
                                className="c12 c13"
                                color="primary"
                              >
                                100
                              </div>
                            </Component>
                          </P>
                        </ControlRange__Value>
                      </div>
                    </Component>
                  </P>
                </ControlRange__ValueWrapper>
                <InputRange
                  kind="primary"
                  max={100}
                  min={0}
                  onChange={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  step={1}
                  type="range"
                  value={100}
                >
                  <input
                    className="c14"
                    kind="primary"
                    max={100}
                    min={0}
                    onChange={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    step={1}
                    type="range"
                    value={100}
                  />
                </InputRange>
              </div>
            </ControlRange__InputWrapper>
          </div>
        </ControlRange__Container>
      </ControlRange>
    </div>
  </DataChannelAdapter__Wrapper>
</DataChannelAdapter>
`;

exports[`should render PWM_CONTROL correctly with zero 1`] = `
.c2 {
  margin: 0;
  font-size: 1rem;
  color: #999A94;
}

.c13 {
  margin: 0;
  font-size: 1rem;
  color: #00A1DE;
}

.c6 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c6:hover {
  background-color: rgb(0,151,208);
}

.c6:active {
  background-color: rgb(0,144,198);
}

.c5 {
  box-sizing: border-box;
  width: 100%;
  border-width: 1px;
  border-style: solid;
  border-radius: 3px;
  outline: 0;
  padding: 0 10px;
  line-height: 1;
  min-height: 32px;
  color: #353630;
  font-size: 1rem;
  border-color: #D1D2D3;
  box-shadow: none;
}

.c5:focus {
  border-color: #00A1DE;
  box-shadow: 0 0 3px 0 rgba(0,161,222,0.5);
}

.c5::-webkit-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::-moz-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5:-ms-input-placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c5::placeholder {
  opacity: 1;
  color: #D1D2D3;
}

.c14 {
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 100%;
  outline: none;
  background-color: rgba(0,0,0,0);
  cursor: pointer;
}

.c14::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-range-track {
  -moz-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-moz-focus-outer {
  border: 0;
}

.c14::-ms-track {
  -webkit-appearance: none;
  height: 16px;
  border-radius: 8px;
  background-image: linear-gradient(-180deg,#DFDFDF 5%,#F6F6F6 96%);
  box-shadow: inset 0 1px 2px 0 rgba(255,255,255,0.35),inset 0 0 0 2px #E5E6E6,inset 0 1px 10px 0 rgba(0,0,0,0.05);
}

.c14::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-moz-range-thumb {
  -moz-appearance: none;
  height: 40px;
  width: 40px;
  border-width: 0;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -moz-appearance: none;
  -moz-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-ms-thumb {
  -webkit-appearance: none;
  margin-top: -12px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
  background-image: radial-gradient(50% 50%,#FFFFFF 50%,#FFFFFF 73%,#F8F8F8 81%,#EBEBEB 90%,#DDDDDD 95%);
  -webkit-transition: -webkit-transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  -webkit-transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  transition: transform 0.3s ease,width 0.2s ease,height 0.2s ease;
  box-shadow: 1px 1px 4px 0 rgba(0,0,0,0.25),inset 0 1px 3px 0 rgba(255,255,255,0.3),inset 0 -2px 2px 0 #00A1DE,inset 0 0 0 3px rgb(0,192,255);
}

.c14::-webkit-slider-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-moz-range-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c14::-ms-thumb:hover {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c7 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c8 > *:first-child {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
}

.c8 > *:last-child {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin: 0 4px;
  -webkit-flex-grow: 1;
  -ms-flex-grow: 1;
  flex-grow: 1;
  -webkit-flex-basis: 0;
  -ms-flex-basis: 0;
  flex-basis: 0;
  overflow: hidden;
}

.c9::before {
  content: "";
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: #D1D2D3;
  height: 4px;
  margin-top: 5px;
  margin-bottom: 8px;
}

.c11 {
  margin-bottom: 15px;
}

.c12 {
  display: inline-block;
}

.c10 {
  padding: 0 0%;
}

.c1 {
  margin-bottom: 10px;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin-top: 5px;
}

.c4 {
  margin-right: 10px;
}

.c0 {
  width: 100%;
}

<DataChannelAdapter
  dataChannelProps={
    Object {
      "format": Object {
        "lowerbound": 0,
        "upperbound": 100,
      },
      "id": "id",
      "type": "PWM_CONTROL",
      "values": Object {
        "period": 0,
        "value": 0,
      },
    }
  }
  eventHandler={[Function]}
>
  <DataChannelAdapter__Wrapper>
    <div
      className="c0"
    >
      <ControlPeriod
        onChange={[Function]}
        onSubmit={[Function]}
        placeholder="Integer only"
        value={0}
      >
        <ControlPeriod__Container>
          <div
            className="c1"
          >
            <label
              htmlFor="input"
            >
              <P
                color="grayBase"
              >
                <Component
                  className="c2"
                  color="grayBase"
                >
                  <p
                    className="c2"
                    color="grayBase"
                  >
                    Period
                  </p>
                </Component>
              </P>
            </label>
            <ControlPeriod__InputWrapper>
              <div
                className="c3"
              >
                <ControlPeriod__StyledInput
                  onChange={[Function]}
                  placeholder="Integer only"
                  type="number"
                  value={0}
                >
                  <Input
                    className="c4"
                    focus={false}
                    kind="primary"
                    onChange={[Function]}
                    placeholder="Integer only"
                    type="number"
                    value={0}
                  >
                    <input
                      className="c4 c5"
                      kind="primary"
                      onChange={[Function]}
                      placeholder="Integer only"
                      type="number"
                      value={0}
                    />
                  </Input>
                </ControlPeriod__StyledInput>
                <Button
                  active={false}
                  block={false}
                  component="button"
                  disabled={false}
                  kind="primary"
                  onClick={[Function]}
                  round={false}
                  size="normal"
                  square={false}
                >
                  <BaseComponent
                    active={false}
                    block={false}
                    className="c6"
                    component="button"
                    disabled={false}
                    kind="primary"
                    onClick={[Function]}
                    round={false}
                    size="normal"
                    square={false}
                  >
                    <button
                      className="c6"
                      onClick={[Function]}
                    >
                      Ok
                    </button>
                  </BaseComponent>
                </Button>
              </div>
            </ControlPeriod__InputWrapper>
          </div>
        </ControlPeriod__Container>
      </ControlPeriod>
      <ControlRange
        labels={
          Array [
            0,
            100,
          ]
        }
        onChange={[Function]}
        onSubmit={[Function]}
        value={0}
        valueMapper={[Function]}
      >
        <ControlRange__Container>
          <div
            className="c7"
          >
            <ControlRange__LabelWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c8"
              >
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          0
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
                <ControlRange__LabelItem>
                  <div
                    className="c9"
                  >
                    <P
                      color="grayBase"
                    >
                      <Component
                        className="c2"
                        color="grayBase"
                      >
                        <div
                          className="c2"
                          color="grayBase"
                        >
                          100
                        </div>
                      </Component>
                    </P>
                  </div>
                </ControlRange__LabelItem>
              </div>
            </ControlRange__LabelWrapper>
            <ControlRange__InputWrapper
              labels={
                Array [
                  0,
                  100,
                ]
              }
            >
              <div
                className="c10"
              >
                <ControlRange__ValueWrapper
                  color="grayBase"
                >
                  <P
                    className="c11"
                    color="grayBase"
                  >
                    <Component
                      className="c11 c2"
                      color="grayBase"
                    >
                      <div
                        className="c11 c2"
                        color="grayBase"
                      >
                        Current value: 
                        <ControlRange__Value
                          color="primary"
                        >
                          <P
                            className="c12"
                            color="primary"
                          >
                            <Component
                              className="c12 c13"
                              color="primary"
                            >
                              <div
                                className="c12 c13"
                                color="primary"
                              >
                                0
                              </div>
                            </Component>
                          </P>
                        </ControlRange__Value>
                      </div>
                    </Component>
                  </P>
                </ControlRange__ValueWrapper>
                <InputRange
                  kind="primary"
                  max={100}
                  min={0}
                  onChange={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  step={1}
                  type="range"
                  value={0}
                >
                  <input
                    className="c14"
                    kind="primary"
                    max={100}
                    min={0}
                    onChange={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    step={1}
                    type="range"
                    value={0}
                  />
                </InputRange>
              </div>
            </ControlRange__InputWrapper>
          </div>
        </ControlRange__Container>
      </ControlRange>
    </div>
  </DataChannelAdapter__Wrapper>
</DataChannelAdapter>
`;
