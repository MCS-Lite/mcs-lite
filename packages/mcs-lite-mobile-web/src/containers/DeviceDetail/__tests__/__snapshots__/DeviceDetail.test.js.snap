// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should renders <DeviceDetail> correctly 1`] = `
<div>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      deviceName
    </title>
  </HelmetWrapper>
  <MobileHeader
    leftChildren={
      <MobileHeaderIcon
        component={[Function]}
        to={[Function]}
      >
        <IconArrowLeft
          size="1em"
        />
      </MobileHeaderIcon>
    }
    rightChildren={
      Array [
        <MobileHeaderIcon
          component={[Function]}
          onClick={[Function]}
      >
          <IconMoreVert
              size="1em"
          />
      </MobileHeaderIcon>,
        false,
      ]
    }
    title="deviceName"
  />
  <main>
    <PullToRefresh
      IconArrow={
        <Heading
          color="grayBase"
          level={2}
        >
          <IconGoDown
            size="1em"
          />
        </Heading>
      }
      IconLoading={
        <Heading
          color="grayBase"
          level={2}
        >
          <Spin>
            <IconLoading
              size="1em"
            />
          </Spin>
        </Heading>
      }
      isLoading={false}
      onPull={[Function]}
    >
      <div>
        <Styled(Img)
          src="banner.svg"
        />
        <Styled(MobileContentWrapper)>
          <styled.div />
        </Styled(MobileContentWrapper)>
      </div>
    </PullToRefresh>
  </main>
</div>
`;

exports[`should renders <DeviceDetail> correctly when Menu show 1`] = `
<div>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title />
  </HelmetWrapper>
  <MobileHeader
    leftChildren={
      <MobileHeaderIcon
        component={[Function]}
        to={[Function]}
      >
        <IconArrowLeft
          size="1em"
        />
      </MobileHeaderIcon>
    }
    rightChildren={
      Array [
        <MobileHeaderIcon
          component={[Function]}
          onClick={[Function]}
      >
          <IconMoreVert
              size="1em"
          />
      </MobileHeaderIcon>,
        <Overlay
          alignConfig={
              Object {
                  "offset": Array [
                    20,
                    -20,
                  ],
                  "points": Array [
                    "tr",
                    "bc",
                  ],
                }
          }
          onClickOutSide={[Function]}
          transitionConfig={
              Object {
                  "component": false,
                  "enter": Object {
                    "translateY": 0,
                  },
                  "leave": Object {
                    "translateY": -10,
                  },
                }
          }
      >
          <Menu>
              <StyledLink
                  to={[Function]}
              >
                  <MenuItem
                      component="div"
                  >
                      deviceIntro
                  </MenuItem>
              </StyledLink>
          </Menu>
      </Overlay>,
      ]
    }
  />
  <main>
    <PullToRefresh
      IconArrow={
        <Heading
          color="grayBase"
          level={2}
        >
          <IconGoDown
            size="1em"
          />
        </Heading>
      }
      IconLoading={
        <Heading
          color="grayBase"
          level={2}
        >
          <Spin>
            <IconLoading
              size="1em"
            />
          </Spin>
        </Heading>
      }
      isLoading={false}
      onPull={[Function]}
    >
      <div>
        <Styled(Img)
          src="banner.svg"
        />
        <Styled(MobileContentWrapper)>
          <styled.div />
        </Styled(MobileContentWrapper)>
      </div>
    </PullToRefresh>
  </main>
</div>
`;

exports[`should renders <DeviceDetail> correctly with Notification 1`] = `
<InjectIntl(withPropsOnChange(WebSocketNotification))
  onClick={[Function]}
/>
`;
